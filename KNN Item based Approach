{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"TPU","colab":{"name":"Web Mining - Movie Recommendation KNN Approach.ipynb","provenance":[],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hCzdXiU0fr2X","executionInfo":{"elapsed":29332,"status":"ok","timestamp":1623104229176,"user":{"displayName":"Rahul Joshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjloI2zvVyxjd528d138bhcRwh1OImwjC7Pfa-oSg=s64","userId":"14357237801485708781"},"user_tz":-120},"outputId":"c6c6c99f-e071-47ad-d43e-c0ca5ae85178"},"source":["! pip install scikit-surprise"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting scikit-surprise\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/97/37/5d334adaf5ddd65da99fc65f6507e0e4599d092ba048f4302fe8775619e8/scikit-surprise-1.1.1.tar.gz (11.8MB)\n","\u001b[K     |████████████████████████████████| 11.8MB 514kB/s \n","\u001b[?25hRequirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise) (1.0.1)\n","Requirement already satisfied: numpy>=1.11.2 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise) (1.19.5)\n","Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise) (1.4.1)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise) (1.15.0)\n","Building wheels for collected packages: scikit-surprise\n","  Building wheel for scikit-surprise (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for scikit-surprise: filename=scikit_surprise-1.1.1-cp37-cp37m-linux_x86_64.whl size=1617642 sha256=722c794c8cd62b8e52b144a696599d52faefef2eb2655105e59d5d8725682e1e\n","  Stored in directory: /root/.cache/pip/wheels/78/9c/3d/41b419c9d2aff5b6e2b4c0fc8d25c538202834058f9ed110d0\n","Successfully built scikit-surprise\n","Installing collected packages: scikit-surprise\n","Successfully installed scikit-surprise-1.1.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IW42O0Z7fr2Z"},"source":["from sklearn.preprocessing import StandardScaler\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","import os\n","from datetime import datetime\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns\n","from math import sqrt\n","import time\n","from scipy.sparse import csr_matrix\n","from sklearn.model_selection import train_test_split as train_test_split_sk\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.model_selection import GridSearchCV"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ijuQQLYBDtfH","executionInfo":{"elapsed":19392,"status":"ok","timestamp":1623104422086,"user":{"displayName":"Rahul Joshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjloI2zvVyxjd528d138bhcRwh1OImwjC7Pfa-oSg=s64","userId":"14357237801485708781"},"user_tz":-120},"outputId":"4b81e649-e5be-487b-caa5-00e883bf8ece"},"source":["from google.colab import drive\n","drive.mount('/content/drive',force_remount=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2_MpUj7Jfr2Z"},"source":["## 1. Data Preparation"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H3B7cay4fr2Z","executionInfo":{"elapsed":949,"status":"ok","timestamp":1623028119124,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"b28760a1-21b0-459c-cf10-cda0d4aa0643"},"source":["##Load Movie Title data\n","df_titles = pd.read_csv('/content/drive/My Drive/Web Mining/Org. Dataset for Netflix/movie_titles.csv', encoding = \"ISO-8859-1\", delimiter=',', names=['id', 'release_year', 'title'])\n","print(df_titles.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(17770, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OkH1qCVlx1L6","executionInfo":{"elapsed":752,"status":"ok","timestamp":1623028119870,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"c4d5f503-aaba-423d-edbb-12aefe5fbd74"},"source":["df_merged = pd.read_csv(\"/content/drive/My Drive/Web Mining/NEW_DATA/final_movies_metadata_linked.csv\", delimiter=';')\n","df_merged.drop(['Unnamed: 0'], axis=1, inplace=True)\n","df_merged.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>netflix_id</th>\n","      <th>title</th>\n","      <th>release_year</th>\n","      <th>metadata_id</th>\n","      <th>imdb_id</th>\n","      <th>original_language</th>\n","      <th>overview</th>\n","      <th>tagline</th>\n","      <th>metadata_genres</th>\n","      <th>netflix_genres</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>402</td>\n","      <td>Pan Tadeusz</td>\n","      <td>1999</td>\n","      <td>4966</td>\n","      <td>tt0170351</td>\n","      <td>pl</td>\n","      <td>A grand and patriotic tale of Poland's struggl...</td>\n","      <td>NaN</td>\n","      <td>[{'id': 10752, 'name': 'War'}, {'id': 18, 'nam...</td>\n","      <td>Drama|History|Romance|War</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>17617</td>\n","      <td>Ginger</td>\n","      <td>1971</td>\n","      <td>89072</td>\n","      <td>tt0067133</td>\n","      <td>en</td>\n","      <td>The police suspect that a drug and forced-pros...</td>\n","      <td>Every man wanted her, no man could tame her! T...</td>\n","      <td>[{'id': 18, 'name': 'Drama'}, {'id': 28, 'name...</td>\n","      <td>Action|Crime|Drama</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>11805</td>\n","      <td>The Big Bounce</td>\n","      <td>2004</td>\n","      <td>12634</td>\n","      <td>tt0315824</td>\n","      <td>en</td>\n","      <td>A small-time con artist and a Hawaiian real es...</td>\n","      <td>It's all in who you trust</td>\n","      <td>[{'id': 35, 'name': 'Comedy'}, {'id': 80, 'nam...</td>\n","      <td>Comedy|Crime</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>459</td>\n","      <td>Basquiat</td>\n","      <td>1996</td>\n","      <td>549</td>\n","      <td>tt0115632</td>\n","      <td>en</td>\n","      <td>Director Julian Schnabel illustrates the portr...</td>\n","      <td>In 1981, A Nineteen-Year-Old Unknown Graffiti ...</td>\n","      <td>[{'id': 18, 'name': 'Drama'}, {'id': 36, 'name...</td>\n","      <td>Biography|Drama</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4607</td>\n","      <td>Melody Time</td>\n","      <td>1948</td>\n","      <td>13757</td>\n","      <td>tt0040580</td>\n","      <td>en</td>\n","      <td>Melody Time is an animated feature produced by...</td>\n","      <td>NaN</td>\n","      <td>[{'id': 10402, 'name': 'Music'}, {'id': 10751,...</td>\n","      <td>Animation|Comedy|Family|Musical</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   netflix_id  ...                   netflix_genres\n","0         402  ...        Drama|History|Romance|War\n","1       17617  ...               Action|Crime|Drama\n","2       11805  ...                     Comedy|Crime\n","3         459  ...                  Biography|Drama\n","4        4607  ...  Animation|Comedy|Family|Musical\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EZ22JNHjx6in","executionInfo":{"elapsed":11,"status":"ok","timestamp":1623028119871,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"be4613e7-b60f-4100-dc6f-e187e95bba6f"},"source":["df_merged.rename(columns={'metadata_id' : 'movie_id', 'netflix_genres' : 'genre'}, inplace=True)\n","\n","df_merged.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>netflix_id</th>\n","      <th>title</th>\n","      <th>release_year</th>\n","      <th>movie_id</th>\n","      <th>imdb_id</th>\n","      <th>original_language</th>\n","      <th>overview</th>\n","      <th>tagline</th>\n","      <th>metadata_genres</th>\n","      <th>genre</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>402</td>\n","      <td>Pan Tadeusz</td>\n","      <td>1999</td>\n","      <td>4966</td>\n","      <td>tt0170351</td>\n","      <td>pl</td>\n","      <td>A grand and patriotic tale of Poland's struggl...</td>\n","      <td>NaN</td>\n","      <td>[{'id': 10752, 'name': 'War'}, {'id': 18, 'nam...</td>\n","      <td>Drama|History|Romance|War</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>17617</td>\n","      <td>Ginger</td>\n","      <td>1971</td>\n","      <td>89072</td>\n","      <td>tt0067133</td>\n","      <td>en</td>\n","      <td>The police suspect that a drug and forced-pros...</td>\n","      <td>Every man wanted her, no man could tame her! T...</td>\n","      <td>[{'id': 18, 'name': 'Drama'}, {'id': 28, 'name...</td>\n","      <td>Action|Crime|Drama</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>11805</td>\n","      <td>The Big Bounce</td>\n","      <td>2004</td>\n","      <td>12634</td>\n","      <td>tt0315824</td>\n","      <td>en</td>\n","      <td>A small-time con artist and a Hawaiian real es...</td>\n","      <td>It's all in who you trust</td>\n","      <td>[{'id': 35, 'name': 'Comedy'}, {'id': 80, 'nam...</td>\n","      <td>Comedy|Crime</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>459</td>\n","      <td>Basquiat</td>\n","      <td>1996</td>\n","      <td>549</td>\n","      <td>tt0115632</td>\n","      <td>en</td>\n","      <td>Director Julian Schnabel illustrates the portr...</td>\n","      <td>In 1981, A Nineteen-Year-Old Unknown Graffiti ...</td>\n","      <td>[{'id': 18, 'name': 'Drama'}, {'id': 36, 'name...</td>\n","      <td>Biography|Drama</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4607</td>\n","      <td>Melody Time</td>\n","      <td>1948</td>\n","      <td>13757</td>\n","      <td>tt0040580</td>\n","      <td>en</td>\n","      <td>Melody Time is an animated feature produced by...</td>\n","      <td>NaN</td>\n","      <td>[{'id': 10402, 'name': 'Music'}, {'id': 10751,...</td>\n","      <td>Animation|Comedy|Family|Musical</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   netflix_id  ...                            genre\n","0         402  ...        Drama|History|Romance|War\n","1       17617  ...               Action|Crime|Drama\n","2       11805  ...                     Comedy|Crime\n","3         459  ...                  Biography|Drama\n","4        4607  ...  Animation|Comedy|Family|Musical\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WzJpTgkByDMx","executionInfo":{"elapsed":9,"status":"ok","timestamp":1623028119871,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"1730b836-30da-491e-e399-e5df4a1a26d8"},"source":["df_metadata=df_merged[['movie_id','title','release_year','overview','genre']]\n","df_metadata.fillna(\"\", inplace=True)\n","df_metadata.head()\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4327: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  downcast=downcast,\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>movie_id</th>\n","      <th>title</th>\n","      <th>release_year</th>\n","      <th>overview</th>\n","      <th>genre</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4966</td>\n","      <td>Pan Tadeusz</td>\n","      <td>1999</td>\n","      <td>A grand and patriotic tale of Poland's struggl...</td>\n","      <td>Drama|History|Romance|War</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>89072</td>\n","      <td>Ginger</td>\n","      <td>1971</td>\n","      <td>The police suspect that a drug and forced-pros...</td>\n","      <td>Action|Crime|Drama</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>12634</td>\n","      <td>The Big Bounce</td>\n","      <td>2004</td>\n","      <td>A small-time con artist and a Hawaiian real es...</td>\n","      <td>Comedy|Crime</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>549</td>\n","      <td>Basquiat</td>\n","      <td>1996</td>\n","      <td>Director Julian Schnabel illustrates the portr...</td>\n","      <td>Biography|Drama</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>13757</td>\n","      <td>Melody Time</td>\n","      <td>1948</td>\n","      <td>Melody Time is an animated feature produced by...</td>\n","      <td>Animation|Comedy|Family|Musical</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   movie_id  ...                            genre\n","0      4966  ...        Drama|History|Romance|War\n","1     89072  ...               Action|Crime|Drama\n","2     12634  ...                     Comedy|Crime\n","3       549  ...                  Biography|Drama\n","4     13757  ...  Animation|Comedy|Family|Musical\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"lpiJHBEsyIbj"},"source":["Mapping_file = dict(zip(df_metadata.title.tolist(), df_metadata.movie_id.tolist()))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l0mXO1VeDUxh","executionInfo":{"elapsed":5034,"status":"ok","timestamp":1623028124898,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"f497c80d-be84-4d7a-8383-fe5ae2b7b060"},"source":["df_ratings = pd.read_csv(\"/content/drive/My Drive/Web Mining/NEW_DATA/Truncated/truncated_ratings.csv\", delimiter=';')\n","df_ratings.drop(['Unnamed: 0'], axis=1, inplace=True)\n","df_ratings.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4265493, 4)"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"jfRJSqQhycBQ"},"source":["#Create dictionary of movie_id to title so that we can use it later to determine title when recommending items\n","dict_id_title = df_merged.set_index(\"netflix_id\")[\"title\"].to_dict()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GFMFPvWvySFS","executionInfo":{"elapsed":159,"status":"ok","timestamp":1623028125047,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"821bc81b-9871-4e62-dfb7-16c4331930f8"},"source":["##Create Movies dataframe to explore movie's avg rating and number of ratings received by user\n","df_titles = pd.DataFrame(df_ratings.groupby('movie_id')['rating'].mean())\n","df_titles['count'] = df_ratings.groupby('movie_id')['rating'].count()\n","df_titles[\"title\"] = pd.Series(dict_id_title)\n","df_titles.head().sort_values('count')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rating</th>\n","      <th>count</th>\n","      <th>title</th>\n","    </tr>\n","    <tr>\n","      <th>movie_id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>12</th>\n","      <td>3.423810</td>\n","      <td>420</td>\n","      <td>My Favorite Brunette</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>3.635535</td>\n","      <td>439</td>\n","      <td>WWE: The Rise &amp; Fall of ECW</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.556656</td>\n","      <td>909</td>\n","      <td>Character</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>2.872961</td>\n","      <td>2330</td>\n","      <td>7 Seconds</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>3.088164</td>\n","      <td>4968</td>\n","      <td>What the #$*! Do We (K)now!?</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            rating  count                         title\n","movie_id                                               \n","12        3.423810    420          My Favorite Brunette\n","5         3.635535    439   WWE: The Rise & Fall of ECW\n","3         3.556656    909                     Character\n","17        2.872961   2330                     7 Seconds\n","8         3.088164   4968  What the #$*! Do We (K)now!?"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zHvDKckyygzu","executionInfo":{"elapsed":555,"status":"ok","timestamp":1623028125599,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"8bd1588b-634e-41e0-9e2a-ef10bfb678e8"},"source":["df_users = pd.DataFrame(df_ratings.groupby('user_id')['rating'].mean())\n","df_users['count'] = df_ratings.groupby('user_id')['rating'].count()\n","df_users.sort_values(['count'])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rating</th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>user_id</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2481919</th>\n","      <td>3.419355</td>\n","      <td>31</td>\n","    </tr>\n","    <tr>\n","      <th>724599</th>\n","      <td>3.419355</td>\n","      <td>31</td>\n","    </tr>\n","    <tr>\n","      <th>1186037</th>\n","      <td>3.250000</td>\n","      <td>32</td>\n","    </tr>\n","    <tr>\n","      <th>1416038</th>\n","      <td>2.781250</td>\n","      <td>32</td>\n","    </tr>\n","    <tr>\n","      <th>184751</th>\n","      <td>3.968750</td>\n","      <td>32</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1664010</th>\n","      <td>4.528994</td>\n","      <td>845</td>\n","    </tr>\n","    <tr>\n","      <th>2118461</th>\n","      <td>4.152403</td>\n","      <td>853</td>\n","    </tr>\n","    <tr>\n","      <th>2439493</th>\n","      <td>1.284553</td>\n","      <td>861</td>\n","    </tr>\n","    <tr>\n","      <th>387418</th>\n","      <td>1.930387</td>\n","      <td>905</td>\n","    </tr>\n","    <tr>\n","      <th>305344</th>\n","      <td>2.016520</td>\n","      <td>908</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>57357 rows × 2 columns</p>\n","</div>"],"text/plain":["           rating  count\n","user_id                 \n","2481919  3.419355     31\n","724599   3.419355     31\n","1186037  3.250000     32\n","1416038  2.781250     32\n","184751   3.968750     32\n","...           ...    ...\n","1664010  4.528994    845\n","2118461  4.152403    853\n","2439493  1.284553    861\n","387418   1.930387    905\n","305344   2.016520    908\n","\n","[57357 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"G2YAyf1McFSG"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sm0kahuUyh2O"},"source":["df_users_f = df_users.drop(df_users[df_users['count'] <150].index)\n","df_titles_f = df_titles.drop(df_titles[df_titles['count'] < 50].index)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rLotK91Zyh40","executionInfo":{"elapsed":221,"status":"ok","timestamp":1623028125816,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"382f426a-5ed3-4d8c-da4a-3030bbb1aab3"},"source":["print(df_titles.shape)\n","print(df_titles_f.shape)\n","print(df_users.shape)\n","print(df_users_f.shape)\n","\n","print('Preserved rate of the movies : {0:.2f} %'.format((df_titles_f.shape[0]/df_titles.shape[0]) * 100))\n","print('Preserved rate of the users : {0:.2f} %'.format((df_users_f.shape[0]/df_users.shape[0]) * 100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(909, 3)\n","(900, 3)\n","(57357, 2)\n","(2225, 2)\n","Preserved rate of the movies : 99.01 %\n","Preserved rate of the users : 3.88 %\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wPNRu7m0yh7o","executionInfo":{"elapsed":6,"status":"ok","timestamp":1623028125816,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"b80495b8-a6b5-4df2-fe0d-da746fab16a8"},"source":["list_users_f = list(df_users_f.index.values)\n","list_titles_f = list(df_titles_f.index.values)\n","\n","print(len(list_users_f))\n","print(len(list_titles_f))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2225\n","900\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sG2R0d4-zcrm","executionInfo":{"elapsed":1084,"status":"ok","timestamp":1623028126897,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"39ebbeb0-0bee-4c15-e9af-4fcabf09011e"},"source":["df_ratings_f = df_ratings[df_ratings['user_id'].isin(list_users_f)]\n","print(df_ratings.shape)\n","print(df_ratings_f.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(4265493, 4)\n","(431752, 4)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Pe8w6cNcHHFv"},"source":["# Find Best Model by Training on Subset of Netflix Data\n"]},{"cell_type":"markdown","metadata":{"id":"Jmhslf1LhmV2"},"source":["###Hyperparameter Tuning"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yecHXxrJz1ZX","executionInfo":{"elapsed":488646,"status":"ok","timestamp":1623028615539,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"f87027e3-3594-469b-e521-742d09d5c6b1"},"source":["# Cross Validation\n","from sklearn.model_selection import train_test_split\n","from surprise.model_selection import cross_validate\n","from surprise import Dataset, Reader\n","from surprise import KNNWithMeans,KNNWithZScore\n","\n","reader = Reader(rating_scale=(0, 5))\n","trainset, testset = train_test_split(df_ratings_f[['user_id','movie_id','rating']], test_size=0.25, random_state=0)\n","df_test =pd.DataFrame(testset,columns= ['user_id','movie_id','rating'])\n","print (\"Test Data Size %i\" %len(df_test))\n","trainset = Dataset.load_from_df(trainset, reader)\n","data = Dataset.load_from_df(df_ratings_f[['user_id','movie_id','rating']], reader)\n","testset = testset.values.tolist()\n","\n","# Define the models and their hyperparameters \n","sim_option_user_cosine = {'name': 'cosine',\n","              'user_based': False   # compute similarities between users\n","               }\n","sim_option_user_pearson = {'name': 'pearson',\n","              'user_based': False  # compute similarities between users\n","}\n","\n","benchmark = []\n","i =0\n","alg_list = ['KNNWithMeans(k=30, sim=cosine, item-based)',\n","            'KNNWithMeans(k=40, sim=cosine, item-based)',\n","            'KNNWithMeans(k=50, sim=cosine, item-based)',\n","            'KNNWithMeans(k=30, sim=pearson, item-based)',\n","            'KNNWithMeans(k=40, sim=pearson, item-based)',\n","            'KNNWithMeans(k=50, sim=pearson, item-based)']\n","\n","for algorithm in [KNNWithMeans(k=30,sim_options=sim_option_user_cosine),\n","                 KNNWithMeans(k=40,sim_options=sim_option_user_cosine),\n","                 KNNWithMeans(k=50,sim_options=sim_option_user_cosine),\n","                 KNNWithMeans(k=30,sim_options=sim_option_user_pearson),\n","                 KNNWithMeans(k=40,sim_options=sim_option_user_pearson),\n","                 KNNWithMeans(k=50,sim_options=sim_option_user_pearson)]:\n","\n","\n","    # Perform cross validation\n","    results = cross_validate(algorithm, trainset, measures=['RMSE','MAE'], cv=5, verbose=False)\n","    \n","    # Get results & append algorithm name\n","    tmp = pd.DataFrame.from_dict(results).mean(axis=0)\n","    tmp = tmp.append(pd.Series([alg_list[i]], index=['Algorithm']))\n","    benchmark.append(tmp)\n","    i+=1\n","    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Test Data Size 107938\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n","Computing the pearson similarity matrix...\n","Done computing similarity matrix.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"oeCWoOFckMmy","executionInfo":{"elapsed":21,"status":"ok","timestamp":1623028615546,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"f4d29363-384f-42d6-946f-c358ef6a24c9"},"source":["  pd.DataFrame(benchmark).set_index('Algorithm').sort_values('test_rmse')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>test_rmse</th>\n","      <th>test_mae</th>\n","      <th>fit_time</th>\n","      <th>test_time</th>\n","    </tr>\n","    <tr>\n","      <th>Algorithm</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>KNNWithMeans(k=30, sim=cosine, item-based)</th>\n","      <td>0.863156</td>\n","      <td>0.674094</td>\n","      <td>2.225934</td>\n","      <td>11.656091</td>\n","    </tr>\n","    <tr>\n","      <th>KNNWithMeans(k=40, sim=cosine, item-based)</th>\n","      <td>0.864992</td>\n","      <td>0.676136</td>\n","      <td>2.143270</td>\n","      <td>12.859512</td>\n","    </tr>\n","    <tr>\n","      <th>KNNWithMeans(k=50, sim=cosine, item-based)</th>\n","      <td>0.867302</td>\n","      <td>0.678379</td>\n","      <td>2.160025</td>\n","      <td>13.787127</td>\n","    </tr>\n","    <tr>\n","      <th>KNNWithMeans(k=40, sim=pearson, item-based)</th>\n","      <td>0.869570</td>\n","      <td>0.678852</td>\n","      <td>3.069048</td>\n","      <td>13.228512</td>\n","    </tr>\n","    <tr>\n","      <th>KNNWithMeans(k=50, sim=pearson, item-based)</th>\n","      <td>0.869728</td>\n","      <td>0.679470</td>\n","      <td>3.058285</td>\n","      <td>14.255937</td>\n","    </tr>\n","    <tr>\n","      <th>KNNWithMeans(k=30, sim=pearson, item-based)</th>\n","      <td>0.871423</td>\n","      <td>0.679999</td>\n","      <td>2.953346</td>\n","      <td>11.856589</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                             test_rmse  ...  test_time\n","Algorithm                                               ...           \n","KNNWithMeans(k=30, sim=cosine, item-based)    0.863156  ...  11.656091\n","KNNWithMeans(k=40, sim=cosine, item-based)    0.864992  ...  12.859512\n","KNNWithMeans(k=50, sim=cosine, item-based)    0.867302  ...  13.787127\n","KNNWithMeans(k=40, sim=pearson, item-based)   0.869570  ...  13.228512\n","KNNWithMeans(k=50, sim=pearson, item-based)   0.869728  ...  14.255937\n","KNNWithMeans(k=30, sim=pearson, item-based)   0.871423  ...  11.856589\n","\n","[6 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bv-vqdxw4T3A","executionInfo":{"elapsed":26368,"status":"ok","timestamp":1623028641904,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"c36d1e28-9acf-4719-92c9-42624a75d84f"},"source":["from surprise import KNNWithMeans\n","\n","trainset = trainset.build_full_trainset()\n","\n","algorithm = KNNWithMeans(k=30,sim_options=sim_option_user_cosine)\n","\n","model_KnnwithMeans = algorithm.fit(trainset)\n","\n","predictions = model_KnnwithMeans.test(testset)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Computing the cosine similarity matrix...\n","Done computing similarity matrix.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":358},"id":"1yX-wOv14S_H","executionInfo":{"elapsed":185,"status":"ok","timestamp":1623028642073,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"925a380c-643c-4af0-e8be-1a35ae3cbb14"},"source":["from collections import Counter\n","df_pred = pd.DataFrame(predictions,columns = ['user_id','movie_id','rating','pred_rating','details'])\n","df_pred.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>movie_id</th>\n","      <th>rating</th>\n","      <th>pred_rating</th>\n","      <th>details</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2062350</td>\n","      <td>1058</td>\n","      <td>5</td>\n","      <td>3.403004</td>\n","      <td>{'actual_k': 30, 'was_impossible': False}</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1118103</td>\n","      <td>1103</td>\n","      <td>4</td>\n","      <td>3.297996</td>\n","      <td>{'actual_k': 30, 'was_impossible': False}</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>518137</td>\n","      <td>166</td>\n","      <td>4</td>\n","      <td>3.754322</td>\n","      <td>{'actual_k': 30, 'was_impossible': False}</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>46650</td>\n","      <td>1708</td>\n","      <td>3</td>\n","      <td>3.078756</td>\n","      <td>{'actual_k': 30, 'was_impossible': False}</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2495584</td>\n","      <td>1682</td>\n","      <td>3</td>\n","      <td>3.315601</td>\n","      <td>{'actual_k': 30, 'was_impossible': False}</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1728944</td>\n","      <td>947</td>\n","      <td>3</td>\n","      <td>3.641561</td>\n","      <td>{'actual_k': 30, 'was_impossible': False}</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2576843</td>\n","      <td>401</td>\n","      <td>2</td>\n","      <td>3.338031</td>\n","      <td>{'actual_k': 30, 'was_impossible': False}</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>1090319</td>\n","      <td>285</td>\n","      <td>3</td>\n","      <td>2.850659</td>\n","      <td>{'actual_k': 30, 'was_impossible': False}</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>232877</td>\n","      <td>187</td>\n","      <td>2</td>\n","      <td>2.515693</td>\n","      <td>{'actual_k': 30, 'was_impossible': False}</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2543231</td>\n","      <td>165</td>\n","      <td>3</td>\n","      <td>3.822791</td>\n","      <td>{'actual_k': 30, 'was_impossible': False}</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user_id  movie_id  ...  pred_rating                                    details\n","0  2062350      1058  ...     3.403004  {'actual_k': 30, 'was_impossible': False}\n","1  1118103      1103  ...     3.297996  {'actual_k': 30, 'was_impossible': False}\n","2   518137       166  ...     3.754322  {'actual_k': 30, 'was_impossible': False}\n","3    46650      1708  ...     3.078756  {'actual_k': 30, 'was_impossible': False}\n","4  2495584      1682  ...     3.315601  {'actual_k': 30, 'was_impossible': False}\n","5  1728944       947  ...     3.641561  {'actual_k': 30, 'was_impossible': False}\n","6  2576843       401  ...     3.338031  {'actual_k': 30, 'was_impossible': False}\n","7  1090319       285  ...     2.850659  {'actual_k': 30, 'was_impossible': False}\n","8   232877       187  ...     2.515693  {'actual_k': 30, 'was_impossible': False}\n","9  2543231       165  ...     3.822791  {'actual_k': 30, 'was_impossible': False}\n","\n","[10 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"Ck_rDgblQ_ft"},"source":["# RecSys\n","def pred_user_rating(userid, num_recommend):\n","    if userid in df_ratings_f.user_id.unique():\n","        ui_list = df_ratings_f[df_ratings_f.user_id == user_id].movie_id.tolist()\n","        d = {k: v for k,v in Mapping_file.items() if not v in ui_list}        \n","        predictedL = []\n","        for i, j in d.items():     \n","            predicted = algorithm.predict(user_id, j)\n","            predictedL.append((i, predicted[3])) \n","        pdf = pd.DataFrame(predictedL, columns = ['movies', 'ratings'])\n","        pdf.sort_values('ratings', ascending=False, inplace=True)  \n","        pdf.set_index('movies', inplace=True)    \n","        return pdf.head(num_recommend)        \n","    else:\n","        print(\"User Id does not exist in the list!\")\n","        return None"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"KXDFNl-_YcVT","executionInfo":{"elapsed":106629,"status":"ok","timestamp":1623028748696,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"a9c7b6e5-6ab3-412c-af2e-bd77a4492e3f"},"source":["user_id = int(input(\"Enter the user id to whom you want to recommend : \"))\n","num_recommend = int(input(\"Enter the number of movies you want to recommend : \"))\n","pred_user_rating(user_id, num_recommend)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Enter the user id to whom you want to recommend : 2062350\n","Enter the number of movies you want to recommend : 10\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ratings</th>\n","    </tr>\n","    <tr>\n","      <th>movies</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Arlington Road</th>\n","      <td>4.576494</td>\n","    </tr>\n","    <tr>\n","      <th>The Cincinnati Kid</th>\n","      <td>4.455880</td>\n","    </tr>\n","    <tr>\n","      <th>Garden State</th>\n","      <td>4.002686</td>\n","    </tr>\n","    <tr>\n","      <th>The Godfather: Part II</th>\n","      <td>4.002441</td>\n","    </tr>\n","    <tr>\n","      <th>Closely Watched Trains</th>\n","      <td>3.994001</td>\n","    </tr>\n","    <tr>\n","      <th>Monsters, Inc.</th>\n","      <td>3.979533</td>\n","    </tr>\n","    <tr>\n","      <th>Batman</th>\n","      <td>3.968087</td>\n","    </tr>\n","    <tr>\n","      <th>Umberto D.</th>\n","      <td>3.960935</td>\n","    </tr>\n","    <tr>\n","      <th>The Man with the Golden Gun</th>\n","      <td>3.955001</td>\n","    </tr>\n","    <tr>\n","      <th>Requiem for a Dream</th>\n","      <td>3.953054</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                              ratings\n","movies                               \n","Arlington Road               4.576494\n","The Cincinnati Kid           4.455880\n","Garden State                 4.002686\n","The Godfather: Part II       4.002441\n","Closely Watched Trains       3.994001\n","Monsters, Inc.               3.979533\n","Batman                       3.968087\n","Umberto D.                   3.960935\n","The Man with the Golden Gun  3.955001\n","Requiem for a Dream          3.953054"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"CuroRDxM5LPc","executionInfo":{"elapsed":17,"status":"ok","timestamp":1623028748699,"user":{"displayName":"Luis Garza","photoUrl":"","userId":"10509476281597857013"},"user_tz":300},"outputId":"147c0d61-d00d-4aca-f130-11c62ea484d5"},"source":["print(\"Get recommended movies metadata\")\n","rec_movies = pred_user_rating(user_id, num_recommend)\n","rec_moves_md = pd.merge(rec_movies, df_metadata , how='left', left_on='movies', right_on='title')[['title','release_year','overview','genre']]\n","display(rec_moves_md.head(10))\n","\n","\n","print(\"\")\n","print(\"Movies that User rated\")\n","user_movies = df_ratings_f[df_ratings_f.user_id==2062350].merge(df_metadata).sort_values('rating', ascending=False)\n","\n","user_movies.head(10)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Get recommended movies metadata\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>title</th>\n","      <th>release_year</th>\n","      <th>overview</th>\n","      <th>genre</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Arlington Road</td>\n","      <td>1999</td>\n","      <td>Threats from sinister foreign nationals aren't...</td>\n","      <td>Crime|Drama|Thriller</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>The Cincinnati Kid</td>\n","      <td>1965</td>\n","      <td>An up-and-coming poker player tries to prove h...</td>\n","      <td>Drama</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Garden State</td>\n","      <td>2004</td>\n","      <td>Andrew returns to his hometown for the funeral...</td>\n","      <td>Comedy|Drama|Romance</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>The Godfather: Part II</td>\n","      <td>1974</td>\n","      <td>In the continuing saga of the Corleone crime f...</td>\n","      <td>Crime|Drama</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Closely Watched Trains</td>\n","      <td>1966</td>\n","      <td>In a small town still occupied by the Germans ...</td>\n","      <td>Comedy|Drama|Romance|War</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Monsters, Inc.</td>\n","      <td>2001</td>\n","      <td>James Sullivan and Mike Wazowski are monsters,...</td>\n","      <td>Animation|Adventure|Comedy|Family|Fantasy</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Batman</td>\n","      <td>1989</td>\n","      <td>The Dark Knight of Gotham City begins his war ...</td>\n","      <td>Action|Adventure</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Umberto D.</td>\n","      <td>1952</td>\n","      <td>Umberto Domenico Ferrari, an elderly and retir...</td>\n","      <td>Drama</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>The Man with the Golden Gun</td>\n","      <td>1974</td>\n","      <td>A golden bullet has 007 engraved on it as it s...</td>\n","      <td>Action|Adventure|Thriller</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Requiem for a Dream</td>\n","      <td>2000</td>\n","      <td>The hopes and dreams of four ambitious people ...</td>\n","      <td>Drama</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                         title  ...                                      genre\n","0               Arlington Road  ...                       Crime|Drama|Thriller\n","1           The Cincinnati Kid  ...                                      Drama\n","2                 Garden State  ...                       Comedy|Drama|Romance\n","3       The Godfather: Part II  ...                                Crime|Drama\n","4       Closely Watched Trains  ...                   Comedy|Drama|Romance|War\n","5               Monsters, Inc.  ...  Animation|Adventure|Comedy|Family|Fantasy\n","6                       Batman  ...                           Action|Adventure\n","7                   Umberto D.  ...                                      Drama\n","8  The Man with the Golden Gun  ...                  Action|Adventure|Thriller\n","9          Requiem for a Dream  ...                                      Drama\n","\n","[10 rows x 4 columns]"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","Movies that User rated\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>movie_id</th>\n","      <th>user_id</th>\n","      <th>rating</th>\n","      <th>rating_date</th>\n","      <th>title</th>\n","      <th>release_year</th>\n","      <th>overview</th>\n","      <th>genre</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>28</td>\n","      <td>2062350</td>\n","      <td>5</td>\n","      <td>2003-06-16</td>\n","      <td>Apocalypse Now</td>\n","      <td>1979</td>\n","      <td>At the height of the Vietnam war, Captain Benj...</td>\n","      <td>Drama|Mystery|War</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>862</td>\n","      <td>2062350</td>\n","      <td>5</td>\n","      <td>2005-01-04</td>\n","      <td>Toy Story</td>\n","      <td>1995</td>\n","      <td>Led by Woody, Andy's toys live happily in his ...</td>\n","      <td>Animation|Adventure|Comedy|Family|Fantasy</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>468</td>\n","      <td>2062350</td>\n","      <td>5</td>\n","      <td>2004-12-21</td>\n","      <td>My Own Private Idaho</td>\n","      <td>1991</td>\n","      <td>In this loose adaptation of Shakespeare's \"Hen...</td>\n","      <td>Drama</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>535</td>\n","      <td>2062350</td>\n","      <td>5</td>\n","      <td>2003-06-15</td>\n","      <td>Flashdance</td>\n","      <td>1983</td>\n","      <td>The popular 1980’s dance movie that depicts th...</td>\n","      <td>Drama|Music|Romance</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>571</td>\n","      <td>2062350</td>\n","      <td>5</td>\n","      <td>2003-06-17</td>\n","      <td>The Birds</td>\n","      <td>1963</td>\n","      <td>Chic socialite Melanie Daniels enjoys a passin...</td>\n","      <td>Drama|Horror|Mystery|Romance</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>615</td>\n","      <td>2062350</td>\n","      <td>5</td>\n","      <td>2003-06-16</td>\n","      <td>The Passion of the Christ</td>\n","      <td>2004</td>\n","      <td>\"The Passion of the Christ\" is a film about th...</td>\n","      <td>Drama</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>629</td>\n","      <td>2062350</td>\n","      <td>5</td>\n","      <td>2004-12-13</td>\n","      <td>The Usual Suspects</td>\n","      <td>1995</td>\n","      <td>Held in an L.A. interrogation room, Verbal Kin...</td>\n","      <td>Crime|Mystery|Thriller</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>640</td>\n","      <td>2062350</td>\n","      <td>5</td>\n","      <td>2003-06-23</td>\n","      <td>Catch Me If You Can</td>\n","      <td>2002</td>\n","      <td>A true story about Frank Abagnale Jr. who, bef...</td>\n","      <td>Biography|Crime|Drama</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>696</td>\n","      <td>2062350</td>\n","      <td>5</td>\n","      <td>2003-06-16</td>\n","      <td>Manhattan</td>\n","      <td>1979</td>\n","      <td>The life of a divorced television writer datin...</td>\n","      <td>Comedy|Drama|Romance</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>705</td>\n","      <td>2062350</td>\n","      <td>5</td>\n","      <td>2003-06-17</td>\n","      <td>All About Eve</td>\n","      <td>1950</td>\n","      <td>From the moment she glimpses her idol at the s...</td>\n","      <td>Drama</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    movie_id  ...                                      genre\n","0         28  ...                          Drama|Mystery|War\n","65       862  ...  Animation|Adventure|Comedy|Family|Fantasy\n","32       468  ...                                      Drama\n","37       535  ...                        Drama|Music|Romance\n","42       571  ...               Drama|Horror|Mystery|Romance\n","46       615  ...                                      Drama\n","48       629  ...                     Crime|Mystery|Thriller\n","50       640  ...                      Biography|Crime|Drama\n","55       696  ...                       Comedy|Drama|Romance\n","56       705  ...                                      Drama\n","\n","[10 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"bbNxTdzyGQra"},"source":["# Split Full Ratings data into Training, Validation and Test Set\n","\n","---\n","\n"]},{"cell_type":"code","metadata":{"id":"GEfH0xQ6GfF7"},"source":["from sklearn.model_selection import train_test_split\n","from surprise.model_selection import cross_validate\n","from surprise import Dataset, Reader, accuracy\n","from surprise import KNNWithMeans,KNNWithZScore\n","\n","\n","# Instantiate a reader with the specified rating scale\n","# and read in the rating data\n","reader = Reader(rating_scale=(0, 5))\n","\n","#rawTrain = pd.read_csv(\"/content/drive/My Drive/Web Mining/NEW_DATA/train_data_ratings.csv\",delimiter=';')\n","#rawTest = pd.read_csv(\"/content/drive/My Drive/Web Mining/NEW_DATA/test_data_ratings.csv\",delimiter=';')\n","rawTrain = pd.read_csv(\"/content/drive/My Drive/Web Mining Project/NEW_DATA/train_data_ratings.csv\",delimiter=';')\n","rawTest = pd.read_csv(\"/content/drive/My Drive/Web Mining Project/NEW_DATA/test_data_ratings.csv\",delimiter=';')\n","rawTrain.drop(['Unnamed: 0'],1,inplace=True)\n","rawTest.drop(['Unnamed: 0'],1,inplace=True)\n","\n","print(rawTrain.info())\n","print(rawTest.info())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LBqzPmL3G3TC"},"source":["#into surprise:\n","rawTrain = Dataset.load_from_df(rawTrain,reader) #used to build validation set as well\n","rawTest = Dataset.load_from_df(rawTest,reader)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hxaoJB9uG5J5"},"source":["rawTrain = rawTrain.build_full_trainset()\n","rawTest = rawTest.build_full_trainset().build_testset()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k81oiF4XsGuf"},"source":["sim_option_user_cosine = {'name': 'cosine',\n","              'user_based': False  # compute similarities between items\n","}\n","\n","algorithm = KNNWithMeans(k=30,sim_options=sim_option_user_cosine)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"STClnnFyIqAW","outputId":"db992d41-62b5-4872-a173-6eec2ed5ce7b"},"source":["model_KNNWithKmeans = algorithm.fit(rawTrain)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Computing the cosine similarity matrix...\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9iiCHB-2ibsY"},"source":["predictions = model_KNNWithKmeans.test(rawTest)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pyFLd8tqJf9-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623113697699,"user_tz":-120,"elapsed":19475,"user":{"displayName":"Rahul Joshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjloI2zvVyxjd528d138bhcRwh1OImwjC7Pfa-oSg=s64","userId":"14357237801485708781"}},"outputId":"06b386b3-06c7-45ad-c2e4-3a32e2f89b24"},"source":["accuracy.rmse(predictions)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["RMSE: 0.8549\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["0.85489472478052"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"kBmq9Wg_kwCD","colab":{"base_uri":"https://localhost:8080/","height":200},"executionInfo":{"status":"ok","timestamp":1623113710227,"user_tz":-120,"elapsed":7929,"user":{"displayName":"Rahul Joshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjloI2zvVyxjd528d138bhcRwh1OImwjC7Pfa-oSg=s64","userId":"14357237801485708781"}},"outputId":"51cf909b-9e7a-4896-bdf2-cf83db6be52b"},"source":["test_data_df = pd.read_csv(\"/content/drive/My Drive/Web Mining Project/NEW_DATA/test_data_ratings.csv\", delimiter=';')\n","test_data_df.drop(['Unnamed: 0'], axis=1, inplace=True)\n","test_data_df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>movie_id</th>\n","      <th>rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1424768</td>\n","      <td>1180</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>653392</td>\n","      <td>15472</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1222598</td>\n","      <td>872</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>341108</td>\n","      <td>10234</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2533261</td>\n","      <td>4912</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user_id  movie_id  rating\n","0  1424768      1180       4\n","1   653392     15472       4\n","2  1222598       872       5\n","3   341108     10234       3\n","4  2533261      4912       5"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"nxvfUnbmk417"},"source":["# Training the models and predicting for the users and movies in the validation data\n","CF_predictions = []\n","\n","# For every movie in the validation data\n","for index, row in test_data_df.iterrows():\n","  CF_predictions.append(model_KNNWithKmeans.predict(row['user_id'], row['movie_id']).est)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7idDlm2VlA_6"},"source":["test_data_df['predicted_rating'] = CF_predictions"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JlRv0PFelESz"},"source":["test_data_df.to_csv('/content/drive/My Drive/Web Mining Project/NEW_DATA/Results/test_data_predictions_knn_item.csv', sep=';', encoding='utf-8', index=False)"],"execution_count":null,"outputs":[]}]}
